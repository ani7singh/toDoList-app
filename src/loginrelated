/*---------------------FOR login---------------------------*/
app.post('/', function (req, res, next) {
    console.log("HEUIBHNJhnu")
    passport.authenticate('localStrategy',
        {
            session: false
        },
         function (err, user, info) {
             // if there are any errors, return the error before anything else
             if (err) throw err;
            if (user) {   // it means the pre-existing token is valid
                res.status(200).send();
            }
            if (info && (Object.keys(req.body) != 0)) {  //it means there is no token in the app and something is in the body;

   /* var userlogin = {};
    userlogin.emailId = req.body.loginEmail;
    userlogin.password = req.body.loginPassword;

    console.log(userlogin)*/
    //    console.log(req.headers.authorization);
    checkUserEmail(userlogin.emailId).then((userObj, err) => {
        var tokenobj = {};
        if (err) throw err;
        console.log("userobj find", userObj);
        console.log("IS PASSWORD MATCHING : ", validPassword(userlogin.password, userObj.password));

        if (validPassword) {

            // console.log("header", req.headers.authorization);
            // if (req.headers.authorization) {
            tokenobj.uId = userObj._id;
            checkuId(tokenobj.uId).then((tokenOb, err) => {
                console.log("tokenobject", tokenOb)
                if (err) throw err;
                res.status(200).send({ authtoken: tokenOb.token });
            })
            // }
        }
        //checkuId(uId).then()
        // console.log("tok",userObj.token)
        //   res.send({authtoken : userObj.token});
    })
})






         /*   if (user) {   // it means the pre-existing token is valid, redirect the app to dashboard
                res.status(200).send({ success: "Redirect the app...." });
            }

            if (err && (Object.keys(req.body) != 0)) {  //it means there is no token in the app and something is in the body;
*/